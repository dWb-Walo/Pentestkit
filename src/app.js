/* Author: Denis Podgurskii */
'use strict'


import "./ptk/packages/browser-polyfill/browser-polyfill.min.js"



import { ptk_settings } from "./ptk/background/settings.js"
import { ptk_proxy } from "./ptk/background/proxy.js"
import { ptk_dashboard } from "./ptk/background/dashboard.js"
import { ptk_rattacker } from "./ptk/background/rattacker.js"
import { ptk_request } from "./ptk/background/request.js"
import { ptk_decoder } from "./ptk/background/decoder.js"
import { ptk_sca } from "./ptk/background/sca.js"

const worker = self



export class ptk_app {
    constructor(settings) {
        
        this.isFirefox = browser.runtime.getBrowserInfo ? true : false
        this.settings = new ptk_settings(settings)

        browser.storage.local.get('pentestkit8_settings').then(function (result) {

            if (result.pentestkit8_settings) {
                this.settings.mergeSettings(result.pentestkit8_settings)
            } else {
                this.settings.resetSettings()
            }



            this.proxy = new ptk_proxy(
                this.settings.proxy.max_tabs,
                this.settings.proxy.max_requests_per_tab,
                this.settings.proxy.tabs_capturing
            )

            this.request = new ptk_request(settings.rbuilder)
            this.request.addMessageListeners()

            this.rattacker = new ptk_rattacker(this.settings.rattacker)
            this.rattacker.addMessageListeners()

            this.decoder = new ptk_decoder()

            this.sca = new ptk_sca()

            this.dashboard = new ptk_dashboard()

            this.addMessageListeners()
        }.bind(this))
    }


    addMessageListeners() {
        browser.runtime.onMessage.addListener(function (message, sender, sendResponse) {
            if (message.channel == "ptk_popup2background_app") {
                if (message.type == "on_updated_settings") {

                    if (this.proxy) {
                        this.proxy.maxTabsCount = this.settings.tabs.max_tabs
                        this.proxy.maxRequestsPerTab = this.settings.tabs.max_requests_per_tab
                        this.proxy.isTabsCapturingActive = this.settings.tabs.tabs_capturing
                    }

                    if (this.settings.integration) {
                        this.integration = []
                        Object.keys(this.settings.integration).forEach((key) => {
                            let s = this.settings.integration[key]
                            if (s.enable) {
                                this.integration[key] = new ptk_integration(s.content, s.channel)
                            }
                        })
                    }

                    if (this.recorder) {
                        this.recorder.setWindowSize = this.settings.recorder.set_window_size
                        this.recorder.windowHeight = this.settings.recorder.window_height
                        this.recorder.windowWidth = this.settings.recorder.window_width
                        this.recorder.doubleClick = this.settings.recorder.double_click
                    }
                }
            }
        }.bind(this))
    }
}



browser.runtime.onInstalled.addListener(function (details) {
    if (details.reason == "install") {
        browser.tabs.create({ url: browser.runtime.getURL('ptk/browser/oninstalled.html') })
    }
    // else if (details.reason == "update") {
    //     browser.tabs.create({ url: browser.runtime.getURL('ptk/browser/onupdated.html') })
    // }
})

// Start PTK app
fetch(browser.runtime.getURL('ptk/settings.json'))
    .then(response => response.json())
    .then(settings => {
        worker.ptk_app = new ptk_app(settings)
    })


